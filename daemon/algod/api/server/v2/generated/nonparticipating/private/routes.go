// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Aborts a catchpoint catchup.
	// (DELETE /v2/catchup/{catchpoint})
	AbortCatchup(ctx echo.Context, catchpoint string) error
	// Starts a catchpoint catchup.
	// (POST /v2/catchup/{catchpoint})
	StartCatchup(ctx echo.Context, catchpoint string, params StartCatchupParams) error

	// (POST /v2/shutdown)
	ShutdownNode(ctx echo.Context, params ShutdownNodeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AbortCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) AbortCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AbortCatchup(ctx, catchpoint)
	return err
}

// StartCatchup converts echo context to params.
func (w *ServerInterfaceWrapper) StartCatchup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "catchpoint" -------------
	var catchpoint string

	err = runtime.BindStyledParameterWithLocation("simple", false, "catchpoint", runtime.ParamLocationPath, ctx.Param("catchpoint"), &catchpoint)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter catchpoint: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartCatchupParams
	// ------------- Optional query parameter "min" -------------

	err = runtime.BindQueryParameter("form", true, false, "min", ctx.QueryParams(), &params.Min)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StartCatchup(ctx, catchpoint, params)
	return err
}

// ShutdownNode converts echo context to params.
func (w *ServerInterfaceWrapper) ShutdownNode(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ShutdownNodeParams
	// ------------- Optional query parameter "timeout" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout", ctx.QueryParams(), &params.Timeout)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ShutdownNode(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v2/catchup/:catchpoint", wrapper.AbortCatchup, m...)
	router.POST(baseURL+"/v2/catchup/:catchpoint", wrapper.StartCatchup, m...)
	router.POST(baseURL+"/v2/shutdown", wrapper.ShutdownNode, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//yBzl+wK/QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
