// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of unconfirmed transactions currently in the transaction pool by address.
	// (GET /v2/accounts/{address}/transactions/pending)
	GetPendingTransactionsByAddress(ctx echo.Context, address string, params GetPendingTransactionsByAddressParams) error
	// Broadcasts a raw transaction or transaction group to the network.
	// (POST /v2/transactions)
	RawTransaction(ctx echo.Context) error
	// Get a list of unconfirmed transactions currently in the transaction pool.
	// (GET /v2/transactions/pending)
	GetPendingTransactions(ctx echo.Context, params GetPendingTransactionsParams) error
	// Get a specific pending transaction.
	// (GET /v2/transactions/pending/{txid})
	PendingTransactionInformation(ctx echo.Context, txid string, params PendingTransactionInformationParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetPendingTransactionsByAddress converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactionsByAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsByAddressParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactionsByAddress(ctx, address, params)
	return err
}

// RawTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RawTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RawTransaction(ctx)
	return err
}

// GetPendingTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetPendingTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPendingTransactionsParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPendingTransactions(ctx, params)
	return err
}

// PendingTransactionInformation converts echo context to params.
func (w *ServerInterfaceWrapper) PendingTransactionInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PendingTransactionInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PendingTransactionInformation(ctx, txid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address/transactions/pending", wrapper.GetPendingTransactionsByAddress, m...)
	router.POST(baseURL+"/v2/transactions", wrapper.RawTransaction, m...)
	router.GET(baseURL+"/v2/transactions/pending", wrapper.GetPendingTransactions, m...)
	router.GET(baseURL+"/v2/transactions/pending/:txid", wrapper.PendingTransactionInformation, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
