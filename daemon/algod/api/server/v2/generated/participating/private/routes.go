// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return a list of participation keys
	// (GET /v2/participation)
	GetParticipationKeys(ctx echo.Context) error
	// Add a participation key to the node
	// (POST /v2/participation)
	AddParticipationKey(ctx echo.Context) error
	// Generate and install participation keys to the node.
	// (POST /v2/participation/generate/{address})
	GenerateParticipationKeys(ctx echo.Context, address string, params GenerateParticipationKeysParams) error
	// Delete a given participation key by ID
	// (DELETE /v2/participation/{participation-id})
	DeleteParticipationKeyByID(ctx echo.Context, participationId string) error
	// Get participation key info given a participation ID
	// (GET /v2/participation/{participation-id})
	GetParticipationKeyByID(ctx echo.Context, participationId string) error
	// Append state proof keys to a participation key
	// (POST /v2/participation/{participation-id})
	AppendKeys(ctx echo.Context, participationId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeys(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeys(ctx)
	return err
}

// AddParticipationKey converts echo context to params.
func (w *ServerInterfaceWrapper) AddParticipationKey(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddParticipationKey(ctx)
	return err
}

// GenerateParticipationKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateParticipationKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateParticipationKeysParams
	// ------------- Optional query parameter "dilution" -------------

	err = runtime.BindQueryParameter("form", true, false, "dilution", ctx.QueryParams(), &params.Dilution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter dilution: %s", err))
	}

	// ------------- Required query parameter "first" -------------

	err = runtime.BindQueryParameter("form", true, true, "first", ctx.QueryParams(), &params.First)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter first: %s", err))
	}

	// ------------- Required query parameter "last" -------------

	err = runtime.BindQueryParameter("form", true, true, "last", ctx.QueryParams(), &params.Last)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter last: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateParticipationKeys(ctx, address, params)
	return err
}

// DeleteParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipationKeyByID(ctx, participationId)
	return err
}

// GetParticipationKeyByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetParticipationKeyByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetParticipationKeyByID(ctx, participationId)
	return err
}

// AppendKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AppendKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "participation-id" -------------
	var participationId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "participation-id", runtime.ParamLocationPath, ctx.Param("participation-id"), &participationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter participation-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AppendKeys(ctx, participationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/participation", wrapper.GetParticipationKeys, m...)
	router.POST(baseURL+"/v2/participation", wrapper.AddParticipationKey, m...)
	router.POST(baseURL+"/v2/participation/generate/:address", wrapper.GenerateParticipationKeys, m...)
	router.DELETE(baseURL+"/v2/participation/:participation-id", wrapper.DeleteParticipationKeyByID, m...)
	router.GET(baseURL+"/v2/participation/:participation-id", wrapper.GetParticipationKeyByID, m...)
	router.POST(baseURL+"/v2/participation/:participation-id", wrapper.AppendKeys, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
